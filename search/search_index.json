{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Susina Configuration Builder","text":"<p>Susina Configuration Builder is a library to load and build configuration objects or arrays. It's based on Symfony Config and it's heavily inspired on Propel configuration sub-system.</p> <p>Building a configuration is a three-step process:</p> <ol> <li>load the parameters from some configuration files</li> <li>process the loaded parameters to normalize and validate them</li> <li>return an array of cleaned parameters or a configuration object</li> </ol> <p>We ship loaders for the following file formats:</p> <ul> <li>.json via PHP json extension</li> <li>.neon via Nette Neon library</li> <li>.php</li> <li>.xml via Susina xml to array library</li> <li>.yml via Symfony Yaml component</li> </ul> <p>The Configuration Builder can populate any object whose constructor, or any other initialize method, takes an array as a parameter.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#workflow","title":"Workflow","text":"<ol> <li>Fork susina/config-builder repository, clone it locally and apply your patches.</li> <li>Run the test suite by <code>composer test</code> command and fix all red tests.</li> <li>Run static analysis tool by <code>composer analytics</code> command and fix all errors.</li> <li>Fix the coding standard by running <code>composer cs:fix</code>.</li> </ol> <p>Tip</p> <p>We provide a check command for the tests, analytics and code style fixing, required for a pull request: run <code>composer check</code></p>"},{"location":"contributing/#running-the-test-suite","title":"Running the Test Suite","text":"<p>While developing, the test part is very important: if you apply a patch to the existing code, the test suite must run without errors or failures and if you add a new functionality, no one will consider it without tests.</p> <p>Our test tool is Pest and we provide a script to launch it:</p> <p><pre><code>composer test\n</code></pre> Since our command runs pest binary under the hood, you can pass all options to it via the <code>--</code> operator, i.e.:</p> <pre><code>composer test -- --stop-on-failure\n</code></pre> <p>You can also use pest directly:</p> <pre><code>vendor/bin/pest\n</code></pre>"},{"location":"contributing/#code-coverage","title":"Code Coverage","text":"<p>We provides three commands to generate a code coverage report in html or xml format:</p> <ul> <li><code>composer coverage</code> command to print a coverage report summary to the console</li> <li><code>composer coverage:html</code> command generates a code coverage report in html format, into the directory <code>coverage/</code></li> <li><code>composer coverage:clover</code> generates the report in xml format, into <code>clover.xml</code> file.</li> </ul>"},{"location":"contributing/#static-analysis-tool","title":"Static Analysis Tool","text":"<p>To prevent as many bugs as possible, we use a static analysis tool called Psalm. To launch it, run the following command:</p> <pre><code>composer analytics\n</code></pre> <p>After its analysis, Psalm outputs errors and issues with its suggestions on how to fix them.</p>"},{"location":"contributing/#coding-standard","title":"Coding Standard","text":"<p>We ship our script to easily fix coding standard errors, via php-cs-fixer tool. To fix coding standard errors just run:</p> <pre><code>composer cs:fix\n</code></pre> <p>and to show the errors without fixing them, run:</p> <pre><code>composer cs:check\n</code></pre> <p>If you want to learn more about our code style, see https://github.com/susina/coding-standard.</p>"},{"location":"contributing/#documentation-contributing","title":"Documentation Contributing","text":"<p><code>susina/config-builder</code> documentation resides into the directory <code>docs/</code>. It's written in markdown and it's generated by MkDocs.</p>"},{"location":"contributing/#install-the-tools","title":"Install the Tools","text":"<p>If you want to contribute to the documentation, you should install the following tools, to generate it locally:</p> <ol> <li>Install MkDocs</li> <li>Install Material theme by running: <code>pip install mkdocs-material</code></li> </ol>"},{"location":"contributing/#markdown-flavour","title":"Markdown flavour","text":"<p>MkDocs uses Python-Markdown with some extensions active by default. It supports the standard markdown, markdown-extra and some of the Github-flavoured markdown features (i.e. syntax highlight). You can find detailed information on https://www.mkdocs.org/user-guide/writing-your-docs/#writing-with-markdown.</p> <p>Additionally, you could get a look at Material theme documentation for further information.</p>"},{"location":"contributing/#admonition","title":"Admonition","text":"<p>admonition extension helps to write beautiful notes or warnings or other (see the official documentation) with a syntax like the following:</p> <pre><code>!!! Danger\n    Very dangerous operation!\n</code></pre> <p>which translates into the following:</p> <p>Danger</p> <p>Very dangerous operation!</p>"},{"location":"example/","title":"Complete Example","text":"<p>In this example, we'll create a complete configuration subsystem for an imaginary application.</p> <p>We assume that our application has the following directory structure:</p> <pre><code>example\n\u2502\n\u2514\u2500\u2500\u2500app\n\u2502    \u2514\u2500\u2500\u2500config\n\u2502    \u2502      example-config.yml\n\u2502    \u2502\n\u2502    \u2514\u2500\u2500\u2500resources\n\u2502\n\u2514\u2500\u2500\u2500src\n\u2502    \u2514\u2500\u2500\u2500Configuration\n\u2502            ExampleConfiguration.php\n\u2502\n\u2514\u2500\u2500\u2500var\n\u2502    \u2514\u2500\u2500\u2500log\n\u2502    \u2502\n\u2502    \u2514\u2500\u2500\u2500cache\n\u2502\n\u2502\n\u2514\u2500\u2500\u2500tests\n</code></pre> <ul> <li><code>app/config/example-config.yml</code> is our configuration file</li> <li><code>var/cache</code> is our cache directory</li> <li><code>src/Configuration/ExampleConfiguration.php</code> is our definition class</li> </ul> <p>The application namespace is <code>App</code> and it points to <code>src</code> directory.</p> <p>We want to manage our configuration via Dot Access Data library.</p>"},{"location":"example/#installation","title":"Installation","text":"<p>We need to install:</p> <ul> <li><code>susina/config-builder</code> (of course!)</li> <li><code>symfony/yaml</code> since we decide to use  yaml format for our file</li> <li><code>dflydev/dot-access-data</code> we love to access the configuration properties via dot syntax</li> </ul> <pre><code>composer require susina/config-builder symfony/yaml dflydev/dot-access-data\n</code></pre>"},{"location":"example/#our-configuration-file","title":"Our configuration file","text":"<p>The configuration file, we'll load and process, is <code>app/config/example-config.yaml</code>:</p> app/config/example-config.yaml<pre><code>app:\n    database:\n        auto_connect: true\n        default_connection: pgsql\n        connections:\n            pgsql:\n                host:     localhost\n                driver:   postgresql\n                username: user\n                password: pass\n            sqlite:\n                host:     localhost\n                driver:   sqlite\n                memory:   true\n                username: user\n                password: pass\n\n    paths:\n        template: app/resources\n        logger: var/log\n</code></pre>"},{"location":"example/#the-definition-class","title":"The definition class","text":"<p>The class containing the definition, to process the configuration parameters is <code>App\\Configuration\\ExampleConfiguration.php</code>:</p> App\\Configuration\\ExampleConfiguration.php<pre><code>&lt;?php declare(strict_types=1);\n\nnamespace App\\Configuration;\n\nuse Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition;\nuse Symfony\\Component\\Config\\Definition\\Builder\\TreeBuilder;\nuse Symfony\\Component\\Config\\Definition\\ConfigurationInterface;\n\nclass ExampleConfiguration implements ConfigurationInterface\n{\n    public function getConfigTreeBuilder()\n    {\n        $treeBuilder = new TreeBuilder('app');\n        $treeBuilder-&gt;getRootNode()\n            -&gt;append($this-&gt;addDatabaseNode())\n            -&gt;append($this-&gt;addPathsNode())\n        ;\n    }\n\n    public function addDatabaseNode(): NodeDefinition\n    {\n        $treeBuilder = new TreeBuilder('database');\n\n        $treeBuilder-&gt;getRootNode()\n            -&gt;children()\n                -&gt;booleanNode('auto_connect')-&gt;defaultTrue()-&gt;end()\n                -&gt;scalarNode('default_connection')-&gt;defaultValue('default')-&gt;end()\n                -&gt;fixXmlConfig('connection')\n                -&gt;children()\n                    -&gt;arrayNode('connections')\n                        -&gt;arrayPrototype()\n                            -&gt;children()\n                                -&gt;scalarNode('driver')-&gt;end()\n                                -&gt;scalarNode('host')-&gt;end()\n                                -&gt;scalarNode('username')-&gt;end()\n                                -&gt;scalarNode('password')-&gt;end()\n                            -&gt;end()\n                        -&gt;end()\n                    -&gt;end()\n                -&gt;end()\n            -&gt;end()\n        ;\n\n        return $treeBuilder;\n    }\n\n    public function addPathsNode(): NodeDefinition\n    {\n        $treeBuilder = new TreeBuilder('paths');\n\n        $treeBuilder-&gt;getRootNode()\n            -&gt;children()\n                -&gt;scalarNode('template')-&gt;required()-&gt;end()\n                -&gt;scalarNode('logger')-&gt;end()\n            -&gt;end()\n        ;\n\n        return $treeBuilder;\n    }\n}\n</code></pre>"},{"location":"example/#lets-go","title":"Let's go!","text":"<p>Let's use the <code>ConfigurationBuilder</code> to load and process our file and to instantiate the class, to manage the configuration:</p> <pre><code>&lt;?php declare(strict_types=1);\n\nuse App\\Configuration\\ExampleConfiguration;\nuse Dflydev\\DotAccessData\\Data;\n\n\n$config = ConfigurationBuilder::create()\n    -&gt;addDirectory('app/config')\n    -&gt;addFile('example-config.yml')\n    -&gt;setDefinition(ExampleConfiguration::class)\n    -&gt;setConfigurationClass(Data::class)\n    -&gt;setCacheDirectory('var/log')\n    -&gt;getConfiguration()\n;\n\n//Now we ca use our configuration object\n$connection = new Connection(\n    $config-&gt;get('database.user'),\n    $config-&gt;get('database.pass')\n);\n\n$template = new Template();\n$template-&gt;setDir($config-&gt;get('paths.template'));\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>Install the library via composer:</p> <pre><code>composer require susina/config-builder\n</code></pre> <p>Additionally, you should install the library you could need to load your configuration file format. In example, if you have to load some yaml files:</p> <pre><code>composer require symfony/yaml\n</code></pre>"},{"location":"installation/#list-of-supported-file-formats-and-libraries-to-load","title":"List of supported file formats and libraries to load","text":"<p>Susina Configuration Builder doesn't pre-install the libraries needed to load your configuration files, to avoid adding unnecessary dependencies to your project. Choosing one or more of these libraries is your responsibility and it depends on which format you prefer.</p> <p>Here are the list of supported file formats and the libraries to load:</p> Format Supported file extension Library to load Installation json .json, .json.dist Bundled with PHP by default enabled by default neon .neon, .neon.dist Nette Neon <code>composer require nette/neon</code> php .php, .php.dist PHP itself none xml .xml, .xml.dist Susina Xml To Array Automatically installed by composer yaml .yaml, .yml, .yaml.dist, .yml.dist Symfony Yaml <code>composer require symfony/yaml</code>"},{"location":"license/","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy] [name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"methods/","title":"Api","text":"<p>The Configuration Builder class can be set up via the following methods:</p>"},{"location":"methods/#addfile","title":"addFile","text":"<p>Signature</p> <p><code>public function addFile(string|SplFileInfo ...$files): self</code></p> <p>The parameters can contain:</p> <ul> <li>the name of the configuration file to load</li> <li>the full path name of the configuration file to load</li> <li>SplFileInfo object representing the configuration file to load</li> </ul> <p>Use this method to add one or more elements to the list of configuration files to load. I.e.:</p> <pre><code>&lt;?php declare(strict_types=1);\n\nuse Susina\\ConfigBuilder\\ConfigurationBuilder;\n\n$builder = new ConfigurationBuilder();\n\n$builder-&gt;addFile('my-project-config.yaml.dist', 'my-project-config-yml');\n</code></pre>"},{"location":"methods/#setfiles","title":"setFiles","text":"<p>Signature</p> <p><code>public function setFiles(array|IteratorAggregate $files): self</code></p> <p>This method receive an array of strings or SplFileInfo objects and set the list of the configuration files to load. This method removes all the files previously added.</p> <pre><code>&lt;?php declare(strict_types=1);\n\nuse Susina\\ConfigBuilder\\ConfigurationBuilder;\n\n$builder = new ConfigurationBuilder();\n$configFiles = ['my-project.dist.xml', 'my-project.xml'];\n\n$builder-&gt;setFiles($configFiles);\n</code></pre> <p>This method can also accept an iterator, containing strings or SplFileInfo, so you can pass also an instance of a finder object, i.e. Symfony Finder:</p> <pre><code>&lt;?php declare(strict_types=1);\n\nuse Susina\\ConfigBuilder\\ConfigurationBuilder;\nuse Symfony\\Component\\Finder\\Finder;\n\n$builder = new ConfigurationBuilder();\n$finder = new Finder();\n\n$finder-&gt;in('app/config')-&gt;name('*.json')-&gt;files();\n\n$builder-&gt;setFiles($finder);\n</code></pre>"},{"location":"methods/#adddirectory","title":"addDirectory","text":"<p>Signature</p> <p><code>public function addDirectory(string|SplFileInfo ...$dirs): self</code></p> <p>Add one or more directories where to find the configuration files.</p> <p>The parameters can contain:</p> <ul> <li>the full path name of the directory</li> <li>SplFileInfo object representing a directory where to find the configuration files</li> </ul> <p>This method check if the passed directories are existent and readable, otherwise throws a <code>ConfigurationBuilderException</code>.</p> <pre><code>&lt;?php declare(strict_types=1);\n\nuse Susina\\ConfigBuilder\\ConfigurationBuilder;\n\n$builder = new ConfigurationBuilder();\n\n$builder-&gt;addDirectory(__DIR__ . '/app/config', getcwd());\n</code></pre>"},{"location":"methods/#setdirectories","title":"setDirectories","text":"<p>Signature</p> <p><code>public function setDirectories(array|IteratorAggregate $dirs): self</code></p> <p>This method receive an array of strings or SplFileInfo objects and set the list of the directories where to find the configuration files to load. This method removes all the directory previously added.</p> <pre><code>&lt;?php declare(strict_types=1);\n\nuse Susina\\ConfigBuilder\\ConfigurationBuilder;\n\n$builder = new ConfigurationBuilder();\n$dirs = [__DIR__ . '/app/config', getcwd()];\n\n$builder-&gt;setDirectories($dirs);\n</code></pre> <p>This method can also accept an iterator, containing strings or SplFileInfo, so you can pass also an instance of a finder object, i.e. Symfony Finder:</p> <pre><code>&lt;?php declare(strict_types=1);\n\nuse Susina\\ConfigBuilder\\ConfigurationBuilder;\nuse Symfony\\Component\\Finder\\Finder;\n\n$builder = new ConfigurationBuilder();\n$finder = new Finder();\n\n$finder-&gt;in(getcwd())-&gt;name('config')-&gt;directories();\n\n$builder-&gt;setDirectories($dirs);\n</code></pre>"},{"location":"methods/#setdefinition","title":"setDefinition","text":"<p>Signature</p> <p><code>public function setDefinition(ConfigurationInterface $definition): self</code></p> <p>Add an instance of <code>Symfony\\Component\\Config\\Definition\\ConfigurationInterface</code> to process the configuration parameters.</p> <p>For further information about Symfony Config and how to define a <code>ConfigurationInterface</code> class, please see the official Symfony documentation.</p>"},{"location":"methods/#setconfigurationclass","title":"setConfigurationClass","text":"<p>Signature</p> <p><code>public function setConfigurationClass(string $configurationClass): self</code></p> <p>Set the configuration class to populate with the processed parameters. If the class does not exist, a <code>ConfigurationBuilderException</code> is thrown. The method expects to pass an array of parameters to the class constructor.</p>"},{"location":"methods/#setinitmethod","title":"setInitMethod","text":"<p>Signature</p> <p><code>public function setInitMethod(string $initMethod): self</code></p> <p>The configuration class, set via setConfigurationClass method, could be populated via its constructor or via an initialization method, expecting an array as parameter. With <code>setInitMethod</code> we set the method to use to populate the configuration class.</p> <p>Suppose you have a configuration class, like the following:</p> <pre><code>&lt;?php declare(strict_types=1);\n\nnamespace MyApp\\MyNamespace;\n\nclass ConfigurationManager {\n\n    public function setParameters(array $params): void\n    {\n        //some operations with $params\n        ...........\n    }\n\n    //some methods\n    ...................\n}\n</code></pre> <p>The set up of your <code>ConfigurationBuilder</code> should be:</p> <pre><code>&lt;?php declare(strict_types=1);\n\nuse MyApp\\MyNamespace\\ConfigManager;\nuse Susina\\ConfigBuilder\\ConfigurationBuilder;\n\n$config = Configurationuilder::create()\n    ..............\n    -&gt;setConfigurationClass(ConfigurationManager::class)\n    -&gt;setInitMethod('setParameters')\n    ;\n</code></pre>"},{"location":"methods/#setbeforeparams","title":"setBeforeParams","text":"<p>Signature</p> <p><code>public function setBeforeParams(array $beforeParams): self</code></p> <p>Set an array of parameters to merge into your configuration before loading the files.</p> <p>Note that the value of this parameters could be overwritten by the ones loaded from the configuration files.</p>"},{"location":"methods/#setafterparams","title":"setAfterParams","text":"<p>Signature</p> <p><code>public function setAfterParams(array $afterParams): self</code></p> <p>Set an array of parameters to merge into your configuration after loading the files.</p> <p>Note that the value of this parameters could overwrite the ones loaded from the configuration files.</p>"},{"location":"methods/#setcachedirectory","title":"setCacheDirectory","text":"<p>Signature</p> <p><code>public function setCacheDirectory(string $cache): self</code></p> <p>Set the directory where to save the cache files (see Cache).</p>"},{"location":"methods/#populatecontainer","title":"populateContainer","text":"<p>Signature</p> <p><code>public function populateContainer(object $container, string $method): void</code></p> <p>Populate a dependency injection container <code>$container</code> with the loaded configuration parameters. You can retrieve each parameter with a dot acces key (i.e. database.connection.dsn).</p>"},{"location":"methods/#keepfirstxmltag","title":"keepFirstXmlTag","text":"<p>Signature</p> <p><code>public function keepFirstXmlTag(bool $keep = true): self</code></p> <p>When loading XML files, keep the first xml tag as part of the configuration.</p> <p>Consider the following xml:</p> <pre><code>&lt;?xml version='1.0' standalone='yes'?&gt;\n&lt;properties&gt;\n  &lt;foo&gt;bar&lt;/foo&gt;\n  &lt;bar&gt;baz&lt;/bar&gt;\n&lt;/properties&gt;\n</code></pre> <p>it usually results in the following array:</p> <pre><code>&lt;?php\n    [\n        'foo' =&gt; 'bar', \n        'bar' =&gt; 'baz'\n    ];\n</code></pre> <p>If you call <code>keepFirstXmTag</code> then the resulted array is the following:</p> <pre><code>&lt;?php\n    [\n        'properties' =&gt; [\n            'foo' =&gt; 'bar', \n            'bar' =&gt; 'baz'\n        ]\n    ];\n</code></pre>"},{"location":"parameters/","title":"Parameters reference","text":"<p>The Configuration Builder supports the definition of some parameters in your configuration file (any format). This functionality is inspired on Symfony ParameterBag and it's implemented by using Susina ParamResolver library.</p> <p>A parameter is a previously defined property, put between <code>%</code> special character. When the builder found a parameter, it simply replaces its placeholder with the previously defined value. In example:</p> <pre><code>general:\n    project: MyProject\n\npaths:\n    projectDir: /home/%project%\n</code></pre> <p>It becomes:</p> <pre><code>general:\n    project: MyProject\n\npaths:\n    projectDir: /home/MyProject\n</code></pre> <p>You can escape the special character <code>%</code> by doubling it:</p> <pre><code>general:\n    project: 100%%\n</code></pre> <p><code>project</code> property now contains the string <code>'100%'</code>.</p>"},{"location":"parameters/#special-parameters-environment-variables","title":"Special parameters: environment variables","text":"<p>The parameter <code>env</code> is used to specify an environment variable. Many hosts give services or credentials via environment variables and you can use them in your configuration file via <code>env.variable</code> syntax. In example, let's suppose to have the following environment variables:</p> <pre><code>&lt;?php\n\n$_ENV['host']   = '192.168.0.54'; //Database host name\n$_ENV['dbName'] = 'myDB'; //Database name\n</code></pre> <p>In your configuration file you can write:</p> <pre><code>project:\n  database:\n      default:\n          adapter: mysql\n          dsn: mysql:host=%env.host%;dbname=%env.dbName%\n</code></pre> <p>and it becomes:</p> <pre><code>project:\n  database:\n      default:\n          adapter: mysql\n          dsn: mysql:host=192.168.0.54;dbname=myDB\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#create-your-configuration-definition","title":"Create Your Configuration Definition","text":"<p>The first step to take is writing a <code>Symfony\\Component\\Config\\Definition\\ConfigurationInterface</code> class,  to define the structure of your configuration.</p> <p>Please, read the official Symfony documentation about defining and processing configuration values, if you are not familiar with it.</p>"},{"location":"usage/#set-up-the-builder","title":"Set Up The Builder","text":"<p>The second step is creating an instance of the ConfigurationBuilder class and setting it up, via its fluent api. Let's suppose we want to look for the configuration files into <code>app/config</code> directory, the name of the definition class is <code>MyProjectConfiguration</code> and the file to load is <code>my-project-config.yml</code>:</p> <pre><code>&lt;?php declare(strict_types=1);\n\nuse Susina\\ConfigBuilder\\ConfigurationBuilder;\n\n$builder = ConfigurationBuilder::create()\n    -&gt;addDirectory('app/config')\n    -&gt;addFile('my-project-config-yml')\n    -&gt;setDefinition(MyProjectConfiguration::class)\n    ;\n</code></pre> <p>You can set up the <code>ConfigurationBuilder</code> via all the methods explained into Api Reference document.</p>"},{"location":"usage/#get-the-configuration-as-an-array","title":"Get The Configuration as an Array","text":"<p>Once you have your builder set up, you can get an array of loaded and processed parameters, by calling getConfigurationArray method:</p> <pre><code>&lt;?php declare(strict_types=1);\n\nuse Susina\\ConfigBuilder\\ConfigurationBuilder;\n\n$builder = new Configurationuilder();\n\n$builder\n    -&gt;addDirectory('app/config')\n    -&gt;addFile('my-project-config-yml')\n    -&gt;setDefinition(MyProjectConfiguration::class)\n    ;\n\n$array = $builder-&gt;getConfigurationArray();\n</code></pre> <p>or you can do it in one-line, thanks to the fluent api:</p> <pre><code>&lt;?php declare(strict_types=1);\n\nuse Susina\\ConfigBuilder\\ConfigurationBuilder;\n\n$array = ConfigurationBuilder::create()\n    -&gt;addDirectory('app/config')\n    -&gt;addFile('my-project-config-yml')\n    -&gt;setDefinition(MyProjectConfiguration::class)\n    -&gt;getConfigurationArray()\n    ;\n</code></pre>"},{"location":"usage/#get-the-configuration-as-an-object","title":"Get The Configuration as an Object","text":"<p>Configuration Builder can return an object, of a given class, populated with your configuration values. This class should accept an array to the constructor or have an initialization method, accepting the same array as parameter.</p> <p>You can set up your configuration class via <code>setConfigurationClass</code> method and, if the class has an initialization method, you can use <code>setInitMethod</code>.</p> <p>Suppose you want to use a dflydev/dot-access-data as configuration class (<code>Dflydev\\DotAccessData\\Data</code> class accept an array of parameters to the constructor):</p> <pre><code>&lt;?php declare(strict_types=1);\n\nuse Dflydev\\DotAccessData\\Data;\nuse Susina\\ConfigBuilder\\ConfigurationBuilder;\n\n$builder = new Configurationuilder();\n\n$builder-&gt;addDirectory('app/config')\n    -&gt;addFile('my-project-config-yml')\n    -&gt;setDefinition(MyProjectConfiguration::class)\n    -&gt;setConfigurationClass(Data::class)\n    ;\n\n$config = $builder-&gt;getConfiguration();\n\n//Now, you can use your configuration class\necho $config-&gt;get('database.connection');\n</code></pre> <p>Now, suppose you have a configuration class, like the following:</p> <pre><code>&lt;?php declare(strict_types=1);\n\nnamespace MyApp\\MyNamespace;\n\nclass ConfigManager {\n\n    public function init(array $params): void\n    {\n        //some operations with $params\n        ...........\n    }\n\n    //some methods\n    ...................\n}\n</code></pre> <p>You can set up the configuration builder to use the <code>init()</code> method, by calling <code>ConfigurationBuilder::setInitMethod</code>:</p> <pre><code>&lt;?php declare(strict_types=1);\n\nuse MyApp\\MyNamespace\\ConfigManager;\nuse Susina\\ConfigBuilder\\ConfigurationBuilder;\n\n$config = Configurationuilder::create()\n    -&gt;addDirectory('app/config')\n    -&gt;addFile('my-project-config-yml')\n    -&gt;setDefinition(MyProjectConfiguration::class)\n    -&gt;setConfigurationClass(ConfigManager::class)\n    -&gt;setInitMethod('init')\n    -&gt;getConfiguration()\n    ;\n</code></pre>"},{"location":"usage/#cache","title":"Cache","text":"<p><code>ConfigurationBuilder</code> has a cache system based on Symfony Config Cache.</p> <p>If you set your cache directory, via <code>setCacheDirectory</code> method, after the first request, the parameters are taken from cache instead of loading from the configuration files and processing them.</p> <p>The cache is invalidated when one of the following events occurs:</p> <ol> <li>one of the configuration files is changed</li> <li>the <code>ConfigurationBuilder</code> set up is changed</li> <li>one of the cache files is deleted</li> </ol> <p>In example, let's suppose you have an application and your bootstrap file looks something like this:</p> <pre><code>// bootstrap.php\n&lt;?php declare(strict_type=1);\n\n$configuration = ConfigurationBuilder::create()\n    -&gt;addDirectory('app/config')\n    -&gt;setCacheDirectory('app/cache')\n    -&gt;addFile('my-app-config.yml')\n    -&gt;setConfigurationClass(ConfigurationManager::class)\n    -&gt;setDefinition(new MyAppConfiguration())\n    -&gt;getConfiguration()\n;\n\n// some other bootstrap instructions\n....................................\n</code></pre> <p>When the first request occurs, the builder loads <code>app/config/my-app-config.yml</code> file, process the parameters (via <code>MyAppConfiguration</code> definition), populates and returns a <code>ConfigurationManager</code> class.</p> <p>For all the subsequent requests, the builder get the parameters from the cache.</p>"}]}